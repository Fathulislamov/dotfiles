(defvar eww "$HOME/.local/bin/eww -c $HOME/.config/eww/bar")

(defwindow bar 
  :monitor 0
	:class "bar"
  :stacking "fg"
	:exclusive true
  :geometry (
		geometry 
		:x "0%"
    :y "0"
;    :width "1495px"
    :width "100%"
    :height "30px"
    :anchor "top center"
	)
	(centerbox 
		:orientation "h" 
		(left)
		(time)
		(right)
	)
)

(defwidget left []
	(box
		:class "left"
		:orientation "h" 
		:space-evenly "true" 
		:valign "start" 
		(workspaces)
	)
)

(defwidget right []
	(box	
		:class "right"
		:spacing 15
		:orientation "h" 
		:space-evenly "false" 
		:halign "end" 
		(wifi)
		(volume)
		(bright)
		(mem)
		(cpu)
		(temp)
		(battery)
		(language)
		(power)
	)
)

; Workspase
(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox 
		:onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box 
			:space-evenly false 
			:orientation "h" 
      (label 
				:text "${workspaces}${current_workspace}" 
				:visible false
			)
      (for workspace in workspaces
       	(eventbox 
					:onclick "hyprctl dispatch workspace ${workspace.id}"
         	(box 
						:class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
         	 	(label 
							:text "${workspace.id == current_workspace ? '' : ''}"
							:class "workspace"
						)
          )
        )
      )
    )
  )
)

;(deflisten window :initial "..." "sh ~/.config/eww/scripts/get-window-title")
;(defwidget window_w []
;  (box
;    (label :text "${window}"
;    )
;  )
;)

;; Clock Widgets ;;
(defpoll hour	:interval "1s"	"date '+%H'")
(defpoll min	:interval "1s"	"date '+%M'")
(defwidget time []
  (eventbox 
		:onhover "eww open calendar"   
  	:onhoverlost "eww close calendar"
		(box	
			:orientation "h" 
			:valign "center"
			(button	
				:onclick "scripts/popup calendar"	
				:class "button-bar time-btn" 
				(label :class "time-label" :text "${hour+':'+min}")
			)
		)
	)
)

;; Calendar Windows ;;
(defwindow calendar
  :monitor 0
	:class "window-cal"
	:geometry (
		geometry 
			:y "2px" 
			:width "270px" 
			:height "60px"
    	:anchor "top center"
	)
	(cal)
)

;; Calendar Widgets ;;
(defwidget cal [] ;;:class "cal-wid" 
	(box 
		:class "cal-box" 
		:orientation "v"
		(box 
			:class "cal-inner-box"
			(calendar 
				:class "cal" 
				:show-details true
				:show-heading false
				:show-day-names true
			  :day calendar_day 
			  :month calendar_month 
			  :year calendar_year
			)
		)
	)
)
(defpoll calendar_day :interval "10h" "date '+%d'")
(defpoll calendar_month :interval "10h" "scripts/calendar")
(defpoll calendar_year :interval "10h" "date '+%Y'")

; Powermenu 
(defwidget power []
	(eventbox	
		:onhover "eww open powermenu"	
		(button		
			:class "button-bar"					
			""
		)
	)
)
(defwindow powermenu
  :monitor 0
	:class "window-power"
	:geometry (
		geometry 
			:y "2px" 
			:x "2px"
			:width "130px" 
			:height "150px"
    	:anchor "top right"
	)
	(powermenu)
)
(defwidget powermenu []

	(eventbox
		:onhoverlost "eww close powermenu" 
		:duration "550ms"
		:class "powermenu-widget"
 		(box 
			:orientation "v" 
			:space-evenly true
			:class "powermenu" 
			:halign "start" 
			:spacing 20
			:width "100%"
   		(button  :halign "start" :class "button-power shutdown" :onclick "systemctl poweroff" "  Shutdown")
  		(button  :halign "start" :class "button-power reboot" :onclick "systemctl reboot" "󰑓  Reboot")
 ;  		(button  :class "lock" :onrightclick "bsplock" "")
   		(button :halign "start" :class "button-power logout" :onclick "hyprctl dispatch exit" "󰍃  Quit")
		)
	)
)

; Wifi 
(defwidget wifi []
	(box
		:orientation "h"  
		:tooltip "${wifi-name == '' ? 'disconnected' : wifi-name}"
		(button
   		 ;:onclick "Kitty nmtui"
   		 :onclick "kitty  --hold"
			 :class "button-bar wifi-icon" wifi-icon
		)
	)
)
(defpoll wifi-icon :interval "1s" "scripts/wifi icon")
(defpoll wifi-name :interval "1s" "scripts/wifi name")


; Memory
(defwidget mem []
	(box 
		:class "mem_module" 
		:vexpand "false" 
		:hexpand "false" 
    (circular-progress 
			:value {EWW_RAM.used_mem_perc}
			:start-at 75
      :class "circular membar"
      :thickness 2
      (button 
        :class "button-bar circular-button"
        :tooltip "Using ${round(EWW_RAM.used_mem_perc,0)} % RAM"
        :onclick "kitty"
				(label 
					:text ""
					:class "circular-text mem-icon"
				)
			)
		)
	)
)
; CPU
(defwidget cpu []
	(box 
		:class "cpu_module" 
		:vexpand "false" 
		:hexpand "false" 
    (circular-progress 
			:value {EWW_CPU.avg}
			:start-at 75
      :class "circular cpubar"
      :thickness 2
      (button 
        :class "button-bar circular-button"
        :tooltip "Using ${round(EWW_CPU.avg,0)} % CPU"
 ;     :onclick "$HOME/.config/eww/bar/scripts/pop system"
				(label 
					;:text "C"
					:text ""
					:class "circular-text cpu-icon"
				)
			)
		)
	)
)
; Temperature CPU
(defwidget temp []
	(box 
		:class "temp_module" 
		:vexpand "false" 
		:hexpand "false" 
    (circular-progress 
			:value {replace(EWW_TEMPS, 'NaN', "null")["CORETEMP_PACKAGE_ID_0"]}
			:start-at 75
      :class "circular temp-bar"
      :thickness 2
      (button 
        :class "button-bar circular-button"
        :tooltip "Temperature CPU ${replace(EWW_TEMPS, 'NaN', "null")["CORETEMP_PACKAGE_ID_0"]}°C"
 ;     :onclick "$HOME/.config/eww/bar/scripts/pop system"
				(label 
					:text ""
					:class "circular-text"
				)
			)
		)
	)
)


; Battery
(defwidget battery []
	(box 
		:class "bat_module" 
		:vexpand "false" 
		:hexpand "false" 
    (circular-progress 
			:value {EWW_BATTERY.BAT0["capacity"]}
			:start-at 75
      :class "circular batbar"
      :thickness 2
			:clockwise false
      (button 
        :class "circular-button "
        :limit-width 2
        :tooltip "Battery power  ${EWW_BATTERY.BAT0["capacity"]} %"
 ;     :onclick "$HOME/.config/eww/bar/scripts/pop system"
        :show_truncated false
        :wrap false
 ;       ""
				(label 
					;:text "${EWW_BATTERY.BAT0["status"] != "Charging" ? "󰁹": "󰂄"}"
					:text "${EWW_BATTERY.BAT0["status"] != "Charging" ? "󰁹": ""}"
					:class "circular-text battery-text"
				)
			)
		)
	)
)

; Brightness Widgets ;;
(defwidget bright []
  (eventbox 
		:onhover "eww update bright=true"   
  	:onhoverlost "eww update bright=false"
  	(box    
			:orientation "h"  
			:space-evenly "false"  
			:spacing 2
  		(revealer 
				:transition "slideleft" 
			  :reveal bright
			  :duration "800ms"
  			(scale 
			    :value current-brightness 
				  :tooltip "Brightness: ${current-brightness}%" 
				  :onchange "brightnessctl set {}%" 
				  :orientation "h" 
				  :flipped true
				  :max 100 
				  :min 1
				)
			)
    	(circular-progress 
				:value current-brightness
				:start-at 75
     		:class "circular"
      	:thickness 2
				:clockwise true
				(button   
					:onclick "scripts/popup audio"   
					:class "circular-button"
					(label 
						:text ""
						:class "circular-text"
					)
				)
			)
		)
	)
)
(defvar bright false)
(defpoll current-brightness :initial 0 :interval "1s" "brightnessctl -m | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")


; Volume Widgets 
(defwidget volume []
	(eventbox 
		:onhover "eww update volum=true" 		
		:onhoverlost "eww update volum=false"
		(box 
			:orientation "h" 	  
			:space-evenly "false" 
			:spacing 2
			(revealer 
				:transition "slideleft" 
			 	:reveal volum         
			 	:duration "800ms"
				(scale    
			 		:value current-volume 
			 		:orientation "h"      
			 		:flipped true 
			 		:tooltip "Volume: ${current-volume}%" 
			 		:max 100
			 		:min 1 
			 		:onchange "amixer -D pulse sset Master {}%" 
				)
			)
    	(circular-progress 
				:value current-volume
				:start-at 75
     		:class "circular"
      	:thickness 2
				:clockwise true
				(button   
					;:onclick "scripts/popup audio"   
					:class "circular-button" 
					(label 
						:text ""
						:class "circular-text"
					)
				)
			)
		)
	)
)
(defpoll current-volume :initial 0 :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defvar volum false)


(defwidget language[] 
	(label 
		:class "language"
		:text "${current-language}"
	)
)
(defpoll current-language :initial "US" :interval "1s" "scripts/current_language")

(defwidget test[] 
(calendar)
)
